#ifndef __BVHTREE
#define __BVHTREE

#include "vector/GenVector.h"
#include "Primitive.h"
#include "HitPoint.h"
#include "Loader.h"
#include "BVHNode.h"

class BVHTree : public Primitive
{
private:
	BVHNode* data;
	BVHTree* left;
	BVHTree* right;
	BVHTree* parent;
	int red;

public:
	BVHTree() ;

	BVHTree(BVHNode* n) ;

	BVHTree(Primitive* p) ;

	BVHTree(BVHTree* copy) ;

	BVHTree* getParent() ;

	BVHTree* getGrandparent() ;

	BVHTree* insertPrimitive(Primitive* p) ;

	BVHTree* getRoot() ;

	//Assumes that the tree either has children or data.
	void insert(BVHNode* toAdd) ;

	void forceCheck() ;

	void recolour1();

	void recolour2() ;

	void recolour3() ;

	void recolour4() ;

	void recolour5() ;



	void recolour() ;

	void informChildren() ;

	void recalculateBounds() ;


	~BVHTree() ;

	float intersect(Ray* r) ;
	Vector3 getNormal(Ray* r, HitPoint* hp) ;

	int leftRed() ;

	int rightRed() ;

	void setLeftRed(int i) ;

	void setRightRed(int i) ;

	Primitive* getPrimitive() ;

	Material* getMaterial() ;

	Vector3 getMinimumPoint() ;

	Vector3 getMaximumPoint() ;

	int getSize() ;

	int getLeaves() ;

	void printTree() ;

	void printTreeHelper(int i) ;

	int reverseColorCheck() ;

	void printReverseColorCheck() ;

	void printColorCheck() ;
};

#endif